pid                     logs/nginx.pid;
error_log               logs/nginx-main_error.log debug;
# Development Mode
master_process  off;
daemon          off;
worker_processes        2;

events {
    worker_connections  1024;
    use                 epoll;
}

http {
    include         mime.types;
    default_type    application/octet-stream;

    access_log      logs/nginx-http_access.log;
    error_log       logs/nginx-http_error.log debug;

    tcp_nopush                      off;
    tcp_nodelay                     on;
    keepalive_timeout               10;
    send_timeout                    10;
    client_body_timeout             10;
    client_header_timeout           10;
    sendfile                        on;
    client_header_buffer_size       1k;
    large_client_header_buffers     2 4k;
    client_max_body_size            1k;
    client_body_buffer_size         1k;
    ignore_invalid_headers          on;
    client_body_in_single_buffer    on;
    push_stream_max_reserved_memory 10m;

    server {
        listen          80;
        server_name     localhost;

        location /channels_stats {
            # activate channels statistics mode for this location
            push_stream_channels_statistics;

            # query string based channel id
            set $push_stream_channel_id             $arg_id;
        }

        location /pub {
            # activate publisher mode for this location
            push_stream_publisher;

            # query string based channel id
            set $push_stream_channel_id             $arg_id;
            # message template
            push_stream_message_template            "<script>p(~id~,'~channel~','~text~');</script>";
            # store messages
            push_stream_store_messages on;
            # max messages to store in memory
            push_stream_max_message_buffer_length   20;
            # message ttl
            push_stream_min_message_buffer_timeout  5m;

            push_stream_max_channel_id_length 200;

            # client_max_body_size MUST be equal to client_body_buffer_size or
            # you will be sorry.
            client_max_body_size                    32k;
            client_body_buffer_size                 32k;
        }

        location ~ /sub/(.*) {
            # activate subscriber mode for this location
            push_stream_subscriber;

            # positional channel path
            set $push_stream_channels_path          $1;
            push_stream_max_channel_id_length 200;
            # header to be sent when receiving new subscriber connection
            push_stream_header_template             "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n<meta http-equiv=\"Cache-Control\" content=\"no-store\">\r\n<meta http-equiv=\"Cache-Control\" content=\"no-cache\">\r\n<meta http-equiv=\"Pragma\" content=\"no-cache\">\r\n<meta http-equiv=\"Expires\" content=\"Thu, 1 Jan 1970 00:00:00 GMT\">\r\n<script type=\"text/javascript\">\r\nwindow.onError = null;\r\ndocument.domain = 'localhost';\r\nparent.PushStream.register(this);\r\n</script>\r\n</head>\r\n<body onload=\"try { parent.PushStream.reset(this) } catch (e) {}\">";
            # message template
            push_stream_message_template            "<script>p(~id~,'~channel~','~text~');</script>";
            # content-type
            push_stream_content_type                "text/html; charset=utf-8";
            # subscriber may create channels on demand or only authorized
            # (publisher) may do it?
            push_stream_authorized_channels_only        off;
            # ping frequency
            push_stream_ping_message_interval           10s;
            # connection ttl to enable recycle
            push_stream_subscriber_connection_timeout   15m;
            # broadcast
            push_stream_broadcast_channel_prefix        "broad_";
            push_stream_broadcast_channel_max_qtd       3;

            # solving some leakage problem with persitent connections in
            # Nginx's chunked filter (ngx_http_chunked_filter_module.c)
            chunked_transfer_encoding                   off;
        }
    }
}
